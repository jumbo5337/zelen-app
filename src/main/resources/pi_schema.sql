CREATE TYPE ROLE_EMUM AS ENUM ('ADMIN', 'USER', 'BLOCKED');
CREATE TYPE PRIVACY_ENUM AS ENUM ('SHOW_ALL', 'SHOW_NAME', 'HIDEN');
CREATE TYPE STATE_ENUM AS ENUM ('CREATED', 'COMPLETED', 'CANCELED');
CREATE TYPE OPERATION_ENUM AS ENUM ('DEPOSIT', 'WITHDROWAL', 'TRANSFER');
CREATE TYPE ADMIN_OPERATION_ENUM AS ENUM ('BAN', 'UNBAN', 'CANCELATION');


CREATE SEQUENCE user_id_sequence INCREMENT 1 START 1000 CACHE 10 OWNED BY USERS.ID
CREATE SEQUENCE operation_id_sequence INCREMENT 1 START 15000 CACHE 10 OWNED BY USERS.ID
CREATE SEQUENCE internal_ops_id_sequence INCREMENT 1 START 25000 CACHE 10 OWNED BY USERS.ID

CREATE TABLE IF NOT EXISTS USERS (
	ID 		  bigint NOT NULL DEFAULT nextval('user_id_sequence'::regclass),
	USERNAME  varchar(200) NOT NULL,
    PASSWORD  varchar(250) NOT NULL,
	LAST_SEEN bigint NOT NULL,
	ROLE	  ROLE_EMUM NOT NULL,
	PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS USER_INFO (
	USER_ID       bigint NOT NULL,
	FIRST_NAME    varchar(100) NOT NULL,
    LAST_NAME    varchar(100) NOT NULL,
	BIRTH_DATE	  date NOT NULL,
	EMAIL		  varchar(100) NOT NULL,
    ADDRES_COUNTRY	varchar(150) DEFAULT NULL,
    ADDRES_CITY	varchar(150) DEFAULT NULL,
	PRIMARY KEY(USER_ID),
	FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS USER_BALANCE (
	USER_ID bigint NOT NULL,
	BALANCE real,
 	PRIMARY KEY(USER_ID),
	FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS USER_PREFERENCES (
	USER_ID bigint NOT NULL,
	TIME_SHIFT real DEFAULT 0.0,
	PRIVACY PRIVACY_ENUM DEFAULT 'SHOW_ALL',
 	PRIMARY KEY(USER_ID),
	FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS USER_PREFERENCES (
	USER_ID bigint NOT NULL,
	TIME_SHIFT real DEFAULT 0.0,
	PRIVACY PRIVACY_ENUM DEFAULT 'SHOW_ALL',
 	PRIMARY KEY(USER_ID),
	FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS USER_OPERATIONS (
	ID 	bigint NOT NULL DEFAULT nextval('operation_id_sequence'::regclass),
	FIRST_USER_ID       bigint NOT NULL,
	SECOND_USER_ID       bigint NOT NULL,
	OP_TYPE	OPERATION_ENUM NOT NULL 
    INCOME real NOT NULL,
	OUTCOME	real NOT NULL,
	FEE 	real NOT NULL,
	created bigint NOT NULL,
	updated bigint NOT NULL,
	OP_STATE STATE_ENUM NOT NULL,
	PRIMARY KEY(ID),
	FOREIGN KEY(FIRST_USER_ID) REFERENCES USERS(ID)
	FOREIGN KEY(SECOND_USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS ADMIN_OPERATIONS (
	ID 	bigint NOT NULL DEFAULT nextval('internal_ops_id_sequence'::regclass),
	USER_ID       bigint NOT NULL,
	ADMIN_ID       bigint NOT NULL,
	OP_TYPE	ADMIN_OPERATION_ENUM NOT NULL 
	created bigint NOT NULL,
	reason  text NOT NULL,
	PRIMARY KEY(ID),
	FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
	FOREIGN KEY(ADMIN_ID) REFERENCES USERS(ID)
);



